/************************************************************
 * Copyright 2007-2011 VMware, Inc.  All rights reserved.
 * -- VMware Confidential
 ************************************************************/

/*
 * Fast aggregator for VT exits, using numeric keys. A table
 * describing the meaning of the numeric keys is printed out.
 *
 * See vt-exit.emt for a slower version with pretty-printed (i.e.,
 * string) aggregate keys.
 */

HV_Exit {
   code = getvmcs(VT_EXIT_REASON);
   if (code == 0) {        /* Exception */
      key1 = getvmcs(VT_EXIT_INT_INFO) & 0xff;
      key2 = key1 == 14 ? getvmcs(VT_EXIT_QUAL) : 0;
   } else if (code == 1) { /* Interrupt */
      key1 = getvmcs(VT_EXIT_INT_INFO) & 0xff;
      key2 = 0;
   } else if (code == 14) { /* INVLPG */
      key1 = getvmcs(VT_EXIT_QUAL);
      key2 = 0;
   } else if (code == 28) { /* CR */
      qual = getvmcs(VT_EXIT_QUAL);
      key1 = qual & 0xf;
      key2 = (qual >> 4) & 1;
   } else if (code == 30) { /* IN/OUT */
      qual = getvmcs(VT_EXIT_QUAL);
      key1 = (qual >> 16) & 0xfff;
      key2 = (qual >> 3) & 1;
   } else {
      key1 = 0;
      key2 = 0;
   }

   exits[code, key1, key2]++;
}

VMMLoad {
   if (VCPUID == 0) {
   printf("\n");
   printf("---------------------------------------------------------------  \n");
   printf("Exit Code  Description         key1              key2            \n");
   printf("---------------------------------------------------------------  \n");
   printf("0  (0x0)   Software exception  Exception number  Faulting address\n");
   printf("1  (0x1)   Hardware interrupt  Interrupt vector  -               \n");
   printf("7  (0x7)   Interrupt window    -                 -               \n");
   printf("10 (0xa)   CPUID               -                 -               \n");
   printf("12 (0xc)   HLT                 -                 -               \n");
   printf("14 (0xe)   INVLPG              Page number       -               \n");
   printf("16 (0x10)  RDTSC               -                 -               \n");
   printf("28 (0x1c)  CR                  Register number   0/1 for rd/wr   \n");
   printf("30 (0x1e)  IN/OUT              Port number       0/1 for out/in  \n");
   printf("43 (0x2b)  TPR                 -                 -               \n");
   printf("44 (0x2c)  APIC                -                 -               \n");
   printf("other      See Intel Manual    -                 -               \n");
   printf("---------------------------------------------------------------  \n");
   }
}
