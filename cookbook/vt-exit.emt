/************************************************************
 * Copyright 2007-2009 VMware, Inc.  All rights reserved.
 ************************************************************/

/*
 * Pretty-printing aggregator for VT exits.
 *
 * Warning: as a result of formatting aggregate keys in a nice,
 * human-readable format, this script incurs runtime overhead on HV
 * exits. See vt-exit-fast.emt for a faster version using on numeric
 * aggregate keys.
 */


HV_Exit {
   string str;
   code = VMCS_EXIT_REASON;
   sprintf(str, "%3d", code);

   if (code == 0) {  // software exception
      intrInfo = VMCS_EXIT_INTR_INFO;
      faultNum = intrInfo & 0xff;
      sprintf(str, "%s softint exc %d", str, faultNum);
      if (faultNum == 14) {
         sprintf(str, "%s #PF @%#llx", str, VMCS_EXIT_QUAL);
      }
   }
   else if (code == 1) {
      intrInfo = VMCS_EXIT_INTR_INFO;
      sprintf(str, "%s hwIRQ %03d", str, intrInfo & 0xff);
   }
   else if (code == 7) {
      sprintf(str, "%s Intr Window", str);
   }
   else if (code == 10) {
      sprintf(str, "%s CPUID", str);
   }
   else if (code == 12) {
      sprintf(str, "%s HLT", str);
   }
   else if (code == 14) {
      sprintf(str, "%s INVLPG @%#llx", str, VMCS_EXIT_QUAL);
   }
   else if (code == 16) {
      sprintf(str, "%s RDTSC", str);
   }
   else if (code == 28) { // CR instruction
      qual = VMCS_EXIT_QUAL;
      sprintf(str, "%s CR%1d", str, qual & 0xf);
      if (qual & (1 << 4)) {
         sprintf(str, "%s WRITE", str);
      } else {
         sprintf(str, "%s READ", str);
      }
   }
   else if (code == 30) { // PIO instruction
      qual = VMCS_EXIT_QUAL;
      wasIn = qual & (1 << 3);
      port  = (qual >> 16) & 0xfff;
      if (wasIn) {
         sprintf(str, "%s %s", str, "IN  ");
      } else {
         sprintf(str, "%s %s", str, "OUT ");
      }
      sprintf(str, "%s port %04x", str, port);
   }
   else if (code == 43) {
      sprintf(str, "%s TPR", str);
   }
   else if (code == 44) {
      sprintf(str, "%s APIC access", str);
   }
   exits[str]++;
}
